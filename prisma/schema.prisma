datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  ADMIN
  USER
}

enum Lang {
  EN
  RU
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id              String            @id @default(cuid())
  name            String?
  role            Role              @default(USER)
  email           String?           @unique
  emailVerified   DateTime?
  image           String?
  accounts        Account[]
  sessions        Session[]
  Workout         Workout[]
  TrainingHistory TrainingHistory[]
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Workout
model Workout {
  id              String            @id @default(cuid())
  title           String
  description     String
  isPublic        Boolean           @default(false)
  userId          String
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  tags            WorkoutTag[]
  TrainingHistory TrainingHistory[]
}

model Tag {
  id       String       @id @default(cuid())
  name     String       @unique
  lang     Lang         @default(EN)
  workouts WorkoutTag[]
}

model WorkoutTag {
  id        String  @id @default(cuid())
  workoutId String
  tagId     String
  workout   Workout @relation(fields: [workoutId], references: [id], onDelete: Cascade)
  tag       Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)
}

// Training 

model TrainingHistory {
  id             String    @id @default(cuid())
  userId         String
  workoutId      String
  comment        String?
  startDate      DateTime  @default(now())
  completionDate DateTime?

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  workout Workout @relation(fields: [workoutId], references: [id], onDelete: Cascade)
}
